<!DOCTYPE html>
<html>
<%

  const GLOBAL_TITLE = 'Rout-Ine';

  const INC_OPT = {
    globalTitle: GLOBAL_TITLE,
    title: 'Gestion des tournées'
  };
%>

  <head>
    <%-
        include('partials/head.ejs', INC_OPT)
      %>
      <script>
      'use strict';

      $(document).ready(function() {

        let tourDates;
        let numberOfTours;
        let beneficiariesFullAddressesData;

        $('#loadTourProgress').hide();

        let currentProgress = 0;

        function updtProgress() {


          $('#loadTourProgress .progress-bar').css('width', currentProgress + '%');
          $('#loadTourProgress .progress-bar > .sr-only').text(currentProgress + '% Complete');

        }

        function requestTrip(tourNum, deliveryDate) {

          return new Promise((resolve, reject) => {

            let params = {
              deliveryDay: deliveryDate.getDate(),
              deliveryMonth: deliveryDate.getMonth(),
              deliveryYear: deliveryDate.getFullYear(),
              num: tourNum
            };

            $.get('downloadTrip', params, (trip) => {

              currentProgress += 100 / numberOfTours;
              updtProgress();

              $.get('downloadAddresses', params, (addresses) => {

                let val = {

                  trip: trip,
                  addresses: addresses

                };

                resolve(val);

              });

            })

          });

        }

        function fillDatesDropdown(displayOld) {

          $('#datesDropwdownMenu ul').empty();

          for (let i in tourDates) {

            let d = tourDates[i].date;

            let date = new Date(d);

            if (displayOld || date.getTime() >= Date.now() - 86400000) {

              let link = $('<a href="#">').text('tournée du ' + date.toLocaleDateString());

              link.click(function() {

                currentProgress = 0;
                updtProgress();
                $('#loadTourProgress').show();

                let promises = [];

                for (let n = 0; n < numberOfTours; ++n) {
                  promises.push(requestTrip(n, date));
                }
                promises.push(requestTrip('Outside', date));

                Promise.all(promises)
                  .then((tres) => {

                    $('#loadTourProgress').hide();

                    let result = {
                      trips: [],
                      addresses: []
                    }

                    for (let t of tres) {

                      result.trips.push(t.trip);
                      result.addresses.push(t.addresses);

                    }

                    displayBest(result);

                    $('#dropdownMenu1').text(link.text());

                    link.parent().siblings().each(function(index) {
                      $(this).css('background-color', '');
                    });

                    link.parent().css('background-color', 'rgb(200,255,200)');

                  });

                fillAddressesListGroup(date);

              });

              $('#datesDropwdownMenu ul').append($('<li>').append(link));

            }

          }

        }

        $('nav #manageToursLink').addClass('active');

        $('#error').hide();
        $('#errorNoData').hide();

        $('#displayOld').change(() => {

          let checked = $('#displayOld').prop('checked');

          fillDatesDropdown(checked);


        });

        let map = initMap();

        $.get('listResults', function(dates) {

          tourDates = dates;

          $.get('getNumberOfTours', (res) => {

            numberOfTours = res.numberOfTours;

            fillDatesDropdown($('#displayOld').prop('checked'));

          });

        });

        function fillAddressesListGroup(date) {

          $('#addressesListGroup').empty();

          let dietsCount = [];

          for (let j = 0; j < numberOfTours + 1; ++j) {

            dietsCount.push({
              '10': 0,
              '20': 0
            });

          }

          for (let i = 1; i < beneficiariesFullAddressesData.features.length; ++i) {

            let addr = beneficiariesFullAddressesData.features[i].properties;

            let textParts = {
              address: addr.label + ', ' + addr.town,
              beneficiaries: addr.beneficiaries,
              tour: addr.tour
            };

            let panel = $('<div class="panel panel-info">');
            let panelHeading = $('<div class="panel-heading">').html(textParts.address + '<br> tournée : ' + (textParts.tour.num + 1));

            let benefsListGroup = $('<ul class="list-group" >');

            let displayedBenef = 0;

            for (let benef of textParts.beneficiaries) {

              let foundDate = false;

              if (date) {

                let dateIso = date.toISOString();

                for (let d of benef.deliveriesDates) {
                  if (d.date == dateIso) {

                    let tourNum = (addr.tour.num != null ? addr.tour.num : numberOfTours);
                    let diet = benef.diet;

                    ++dietsCount[tourNum][diet];

                    // console.log(tourNum);
                    // console.log(diet);
                    foundDate = true;
                    break;

                  }
                }

              }

              if (!date || foundDate) {

                let grouItemText =
                  benef.name +
                  '<br>' + benef.address_additional +
                  '<br>' + benef.note;

                let groupItem = $('<li class="list-group-item">').html(grouItemText);
                benefsListGroup.append(groupItem);

                ++displayedBenef;

              }

            }

            if (!date || displayedBenef > 0) {

              let panelBody = $('<div class="panel-body">').append(benefsListGroup);

              panel.append(panelHeading).append(panelBody);

              $('#addressesListGroup').append($('<li class="list-group-item">').append(panel));

            }

          }

          console.log(dietsCount);

          $('#dietsSummary thead').find("th:gt(0)").remove();
          $('#dietsSummary tbody').empty();
          $('#dietsSummary tfoot').find("td:gt(0)").remove();

          for (let tourNum in dietsCount) {

            $('#dietsSummary thead tr').append($('<th>').text('Tournée ' + (1 + parseInt(tourNum))));

            // for (let i = 0; i < rows.length; ++i) {
            //   rows[i].append($('<td>').text(dietsCount[dietCode]));
            // }
            // rows[rows.length - 1]

            // row.append($('<td>').text(dietsCount[dietCode]));

            // $('#dietsSummary tbody').append(row);

          }

          let dietMapCodeName = {
            '10': 'Normaux',
            '20': 'Régimes'
          };

          let totaux = [];
          totaux.length = dietsCount.length;
          totaux.fill(0);

          console.log(totaux);

          for (let dietCode in dietMapCodeName) {

            let row = $('<tr>').append($('<td>').text(dietMapCodeName[dietCode]));

            for (let tourNum in dietsCount) {
              row.append($('<td>').text(dietsCount[tourNum][dietCode]));
              totaux[tourNum] += dietsCount[tourNum][dietCode];
            }

            $('#dietsSummary tbody').append(row);

          }

          for (let total of totaux) {

            $('#dietsSummary tfoot tr').append($('<td>').text(total));

          }

        }

        $.get('beneficiaries', function(fullAddressesData) {

          beneficiariesFullAddressesData = fullAddressesData;

          fillAddressesListGroup();

        });

        let routes = [];
        let controls = [];

        function cleanMap() {

          routes.forEach(function(layer) {
            map.removeLayer(layer);
          });

          controls.forEach(function(control) {
            map.removeControl(control);
          });

          $('#infos').empty();
        }

        function displayBest(bestResult) {

          if (bestResult.trips) {

            let tours = bestResult.trips;

            cleanMap();

            // fillResultsInfo('#infos', bestResult, markersColors);

            let groupTours = 'Tournées',
              groupMarkers = 'Adresses';
            let overlayMaps = {
              [groupTours]: {},
              [groupMarkers]: {}
            };


            for (let i in tours) {

              let tour = tours[i];

              let routeLayer = L.geoJSON(tour.geometry);
              routeLayer.setStyle(function(feature) {
                return {
                  color: markersColors[i]
                };
              }).addTo(map);

              routes.push(routeLayer);


              let markers = addressesMarkers(bestResult.addresses[i].features, markersColors[i]);

              routes.push(markers);

              let legend = {
                color: '<i class="layer-control-legend" style="background:' + markersColors[i] + ';"></i>',
                text: ' Tournée ' + (parseInt(i) + 1)
              };

              overlayMaps[groupTours][legend.color + legend.text] = routeLayer;
              overlayMaps[groupMarkers][legend.color + legend.text] = markers;

            }

            var options = {
              // Make the "trips" group exclusive (use radio inputs)
              // exclusiveGroups: [groupName]
            };

            let groupControl = L.control.groupedLayers(null, overlayMaps, options);

            groupControl.addTo(map);

            controls.push(groupControl);

          } else {

            $('#error').show();

          }


        };

      });
      </script>
  </head>

  <body>
    <%-
    include('partials/header.ejs', INC_OPT)
  %>
      <div id="error" class="alert alert-danger" role="alert">Une erreur inconnue s'est produite, se référer aux logs serveur</div>
      <div class="container-fluid">
        <div class="row" id="main">
          <div class="col-xs-8">
            <div class="row">
              <div class="col-xs-3">
                <div class="row">
                  <div class="col-xs-12">
                    <label for="displayOld">Voir anciennes </label>
                    <input type="checkbox" id="displayOld">
                  </div>
                </div>
                <div class="row">
                  <div class="col-xs-12">
                    <div id="errorNoData" class="alert alert-danger" role="alert">Aucun résultat, lancer un <a href="tourComputing">Calcul des tournées</a></div>
                    <div id="datesDropwdownMenu" class="dropdown">
                      <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                        Sélection tournée
                        <span class="caret"></span>
                      </button>
                      <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                      </ul>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="progress" id="loadTourProgress">
                    <div class="progress-bar progress-bar-info progress-bar-striped" role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: 0%">
                      <span class="sr-only">0% Complete</span>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <p id="infos">
                  </p>
                </div>
              </div>
              <div class="col-xs-9">
                <div id="map"></div>
              </div>
            </div>
            <div class="row">
              <table id="dietsSummary" class="table table-hover">
                <thead>
                  <tr>
                    <th>Repas</th>
                  </tr>
                </thead>
                <tbody>
                </tbody>
                <tfoot>
                  <tr>
                    <td>Total</td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>
          <div class="col-xs-4">
            <ul class="list-group" id="addressesListGroup">
            </ul>
          </div>
        </div>
      </div>
  </body>

</html>
